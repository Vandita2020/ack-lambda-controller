// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// FunctionEventInvokeConfigSpec defines the desired state of FunctionEventInvokeConfig.
//

type FunctionEventInvokeConfigSpec struct {

	// A destination for events after they have been sent to a function for processing.
	//
	// Destinations
	//
	//   - Function - The Amazon Resource Name (ARN) of a Lambda function.
	//
	//   - Queue - The ARN of an SQS queue.
	//
	//   - Topic - The ARN of an SNS topic.
	//
	//   - Event Bus - The ARN of an Amazon EventBridge event bus.
	DestinationConfig *DestinationConfig `json:"destinationConfig,omitempty"`
	// The name of the Lambda function, version, or alias.
	//
	// Name formats
	//
	//   - Function name - my-function (name-only), my-function:v1 (with alias).
	//
	//   - Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.
	//
	//   - Partial ARN - 123456789012:function:my-function.
	//
	// You can append a version number or alias to any of the formats. The length
	// constraint applies only to the full ARN. If you specify only the function
	// name, it is limited to 64 characters in length.
	// +kubebuilder:validation:Required
	FunctionName *string `json:"functionName"`
	// The maximum age of a request that Lambda sends to a function for processing.
	MaximumEventAgeInSeconds *int64 `json:"maximumEventAgeInSeconds,omitempty"`
	// The maximum number of times to retry when the function returns an error.
	MaximumRetryAttempts *int64 `json:"maximumRetryAttempts,omitempty"`
	// A version number or alias name.
	// +kubebuilder:validation:Required
	Qualifier *string `json:"qualifier"`
}

// FunctionEventInvokeConfigStatus defines the observed state of FunctionEventInvokeConfig
type FunctionEventInvokeConfigStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRS managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The Amazon Resource Name (ARN) of the function.
	// +kubebuilder:validation:Optional
	FunctionARN *string `json:"functionARN,omitempty"`
	// The date and time that the configuration was last updated.
	// +kubebuilder:validation:Optional
	LastModified *metav1.Time `json:"lastModified,omitempty"`
}

// FunctionEventInvokeConfig is the Schema for the FunctionEventInvokeConfigs API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
type FunctionEventInvokeConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionEventInvokeConfigSpec   `json:"spec,omitempty"`
	Status            FunctionEventInvokeConfigStatus `json:"status,omitempty"`
}

// FunctionEventInvokeConfigList contains a list of FunctionEventInvokeConfig
// +kubebuilder:object:root=true
type FunctionEventInvokeConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionEventInvokeConfig `json:"items"`
}

func init() {
	SchemeBuilder.Register(&FunctionEventInvokeConfig{}, &FunctionEventInvokeConfigList{})
}
