// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package function_event_invoke_config

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.DestinationConfig, b.ko.Spec.DestinationConfig) {
		delta.Add("Spec.DestinationConfig", a.ko.Spec.DestinationConfig, b.ko.Spec.DestinationConfig)
	} else if a.ko.Spec.DestinationConfig != nil && b.ko.Spec.DestinationConfig != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.DestinationConfig.OnFailure, b.ko.Spec.DestinationConfig.OnFailure) {
			delta.Add("Spec.DestinationConfig.OnFailure", a.ko.Spec.DestinationConfig.OnFailure, b.ko.Spec.DestinationConfig.OnFailure)
		} else if a.ko.Spec.DestinationConfig.OnFailure != nil && b.ko.Spec.DestinationConfig.OnFailure != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DestinationConfig.OnFailure.Destination, b.ko.Spec.DestinationConfig.OnFailure.Destination) {
				delta.Add("Spec.DestinationConfig.OnFailure.Destination", a.ko.Spec.DestinationConfig.OnFailure.Destination, b.ko.Spec.DestinationConfig.OnFailure.Destination)
			} else if a.ko.Spec.DestinationConfig.OnFailure.Destination != nil && b.ko.Spec.DestinationConfig.OnFailure.Destination != nil {
				if *a.ko.Spec.DestinationConfig.OnFailure.Destination != *b.ko.Spec.DestinationConfig.OnFailure.Destination {
					delta.Add("Spec.DestinationConfig.OnFailure.Destination", a.ko.Spec.DestinationConfig.OnFailure.Destination, b.ko.Spec.DestinationConfig.OnFailure.Destination)
				}
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.DestinationConfig.OnSuccess, b.ko.Spec.DestinationConfig.OnSuccess) {
			delta.Add("Spec.DestinationConfig.OnSuccess", a.ko.Spec.DestinationConfig.OnSuccess, b.ko.Spec.DestinationConfig.OnSuccess)
		} else if a.ko.Spec.DestinationConfig.OnSuccess != nil && b.ko.Spec.DestinationConfig.OnSuccess != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.DestinationConfig.OnSuccess.Destination, b.ko.Spec.DestinationConfig.OnSuccess.Destination) {
				delta.Add("Spec.DestinationConfig.OnSuccess.Destination", a.ko.Spec.DestinationConfig.OnSuccess.Destination, b.ko.Spec.DestinationConfig.OnSuccess.Destination)
			} else if a.ko.Spec.DestinationConfig.OnSuccess.Destination != nil && b.ko.Spec.DestinationConfig.OnSuccess.Destination != nil {
				if *a.ko.Spec.DestinationConfig.OnSuccess.Destination != *b.ko.Spec.DestinationConfig.OnSuccess.Destination {
					delta.Add("Spec.DestinationConfig.OnSuccess.Destination", a.ko.Spec.DestinationConfig.OnSuccess.Destination, b.ko.Spec.DestinationConfig.OnSuccess.Destination)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.FunctionName, b.ko.Spec.FunctionName) {
		delta.Add("Spec.FunctionName", a.ko.Spec.FunctionName, b.ko.Spec.FunctionName)
	} else if a.ko.Spec.FunctionName != nil && b.ko.Spec.FunctionName != nil {
		if *a.ko.Spec.FunctionName != *b.ko.Spec.FunctionName {
			delta.Add("Spec.FunctionName", a.ko.Spec.FunctionName, b.ko.Spec.FunctionName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MaximumEventAgeInSeconds, b.ko.Spec.MaximumEventAgeInSeconds) {
		delta.Add("Spec.MaximumEventAgeInSeconds", a.ko.Spec.MaximumEventAgeInSeconds, b.ko.Spec.MaximumEventAgeInSeconds)
	} else if a.ko.Spec.MaximumEventAgeInSeconds != nil && b.ko.Spec.MaximumEventAgeInSeconds != nil {
		if *a.ko.Spec.MaximumEventAgeInSeconds != *b.ko.Spec.MaximumEventAgeInSeconds {
			delta.Add("Spec.MaximumEventAgeInSeconds", a.ko.Spec.MaximumEventAgeInSeconds, b.ko.Spec.MaximumEventAgeInSeconds)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MaximumRetryAttempts, b.ko.Spec.MaximumRetryAttempts) {
		delta.Add("Spec.MaximumRetryAttempts", a.ko.Spec.MaximumRetryAttempts, b.ko.Spec.MaximumRetryAttempts)
	} else if a.ko.Spec.MaximumRetryAttempts != nil && b.ko.Spec.MaximumRetryAttempts != nil {
		if *a.ko.Spec.MaximumRetryAttempts != *b.ko.Spec.MaximumRetryAttempts {
			delta.Add("Spec.MaximumRetryAttempts", a.ko.Spec.MaximumRetryAttempts, b.ko.Spec.MaximumRetryAttempts)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Qualifier, b.ko.Spec.Qualifier) {
		delta.Add("Spec.Qualifier", a.ko.Spec.Qualifier, b.ko.Spec.Qualifier)
	} else if a.ko.Spec.Qualifier != nil && b.ko.Spec.Qualifier != nil {
		if *a.ko.Spec.Qualifier != *b.ko.Spec.Qualifier {
			delta.Add("Spec.Qualifier", a.ko.Spec.Qualifier, b.ko.Spec.Qualifier)
		}
	}

	return delta
}
